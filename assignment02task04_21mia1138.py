# -*- coding: utf-8 -*-
"""Assignment02Task04_21MIA1138.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1ZJqmbZc5J3rSsZGt-u1MNJpkXiw68Vpg

# Mohamed Riyaz S
# 21MIA1138
# 04.08.2024
"""

pip install opencv-python-headless ffmpeg-python matplotlib

import os
import subprocess
import cv2
import matplotlib.pyplot as plt

# Define paths
video_path = "/content/istockphoto-186900953-640_adpp_is.mp4"
output_dir = "extracted_frames"
os.makedirs(output_dir, exist_ok=True)

# Extract frames using ffmpeg
subprocess.run([
    "ffmpeg", "-i", video_path, "-vf",
    "select='eq(pict_type,I)',showinfo",
    "-vsync", "vfr", f"{output_dir}/I_frame_%03d.png"
])
subprocess.run([
    "ffmpeg", "-i", video_path, "-vf",
    "select='eq(pict_type,P)',showinfo",
    "-vsync", "vfr", f"{output_dir}/P_frame_%03d.png"
])
subprocess.run([
    "ffmpeg", "-i", video_path, "-vf",
    "select='eq(pict_type,B)',showinfo",
    "-vsync", "vfr", f"{output_dir}/B_frame_%03d.png"
])

# Calculate sizes
frame_sizes = {'I': [], 'P': [], 'B': []}
for frame_type in frame_sizes.keys():
    for frame_file in os.listdir(output_dir):
        if frame_file.startswith(frame_type):
            frame_path = os.path.join(output_dir, frame_file)
            frame_size = os.path.getsize(frame_path)
            frame_sizes[frame_type].append(frame_size)

# Calculate average sizes
avg_sizes = {k: sum(v)/len(v) if v else 0 for k, v in frame_sizes.items()}

# Plotting the results
frame_types = list(avg_sizes.keys())
avg_size_values = list(avg_sizes.values())

plt.bar(frame_types, avg_size_values, color=['blue', 'orange', 'green'])
plt.xlabel('Frame Type')
plt.ylabel('Average Size (bytes)')
plt.title('Average Frame Sizes of I, P, and B Frames')
plt.show()

# Discuss compression efficiency
print("Average Sizes (bytes):", avg_sizes)
print("\nCompression Efficiency Analysis:")
print("I-frames (Intra-coded) are key frames and are larger because they contain a full image.")
print("P-frames (Predictive-coded) use data from previous frames to encode, hence smaller.")
print("B-frames (Bi-directional) use data from both previous and future frames, making them the smallest.")